{
  // Place your ex0bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "discord.js command": {
    "scope": "javascript",
    "prefix": "cmd",
    "body": [
      "const { SlashCommandBuilder } = require('@discordjs/builders');\n",
      "module.exports = {",
      "\tdata: new SlashCommandBuilder().setName('$1').setDescription('$2'),",
      "\tpermissions: [],",
      "\tasync execute(interaction, redisClient) {",
      "\t\t$0",
      "\t},",
      "};",
      ""
    ]
  },
  "discord.js subcommand": {
    "scope": "javascript",
    "prefix": "subcmd",
    "body": [
      "const { SlashCommandSubcommandBuilder } = require('@discordjs/builders');\n",
      "module.exports = {",
      "\tdata: new SlashCommandSubcommandBuilder().setName('$1').setDescription('$2'),",
      "\tasync execute(interaction, redisClient) {",
      "\t\t$0",
      "\t},",
      "};",
      ""
    ]
  },
  "discord.js subcommand group": {
    "scope": "javascript",
    "prefix": "subgcmd",
    "body": [
      "const { SlashCommandSubcommandGroupBuilder } = require('@discordjs/builders');\n",
      "module.exports = {",
      "\tdata: new SlashCommandSubcommandGroupBuilder().setName('$1').setDescription('$2'),",
      "\tasync execute(interaction, redisClient) {",
      "\t\t$0",
      "\t},",
      "};",
      ""
    ]
  }
}
